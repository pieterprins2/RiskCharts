ticker == "MR_5050" ~ "#238B45",
ticker == "MR_3070" ~ "#006D2C",
ticker == "BENEGA" ~ brewer.pal(7,"Purples")[5]),
alpha = 0.7,
label = factor(label, levels = c("MSDEWIN", "MR_7030", "MR_5050", "MR_3070", "BENEGA"))) |>
select(date, ticker, price_index, name, label, fill, alpha)
MSDEWIN_perf <- function(start_date = start_date_attr, end_date = snapshot_date) {
all_prices_eur_long %>%
filter(ticker == "MSDEWIN", date == start_date | date == end_date) %>%
mutate(return = price_eur/lag(price_eur)-1) %>%
ungroup() %>%
select(return) %>%
tail(1) %>%
as.double()
}
MSDEWIN_streep <- function(aantal_bars, start_date = start_date_attr, end_date = snapshot_date) {
list(
annotate('segment', x = 0.55, xend = aantal_bars + 1 - 0.55,
y = MSDEWIN_perf(start_date, end_date),
yend = MSDEWIN_perf(start_date, end_date),
linewidth = 2, alpha = 0.2, color = bmgray)
)
}
#default kleuren functie van stackoverflow geplukt
ggplotColours <- function(n = 6, h = c(0, 360) + 15) {
if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n
hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}
#default kleuren voor 11 levels: ggplotColours(n = 11)
#tabel van maken default kleuren voor 11 levels
sectors_colors <-
sector_levels_RD |>
as_tibble() |>
rename(ticker = value) |>
mutate(fill = ggplotColours(n = 11))
sector_chart_data_incl <-
MSCI_sector_indices_in_en_ex_EUR_hist |>
filter(incl_or_excl == "incl") |>
rename(price_index = index,
ticker = sector) |>
left_join(sectors_colors, by = "ticker") |>
mutate(label = abbreviate(ticker),
label = factor(label, levels = abbreviate(sector_levels_RD)),
name = ticker,
alpha = 0.6) |>
select(date, ticker, price_index, name, label, fill, alpha)
sector_chart_data_incl_excl <-
MSCI_sector_indices_in_en_ex_EUR_hist |>
rename(ticker = sector,
price_index = index) |>
left_join(sectors_colors, by = "ticker") |>
mutate(ticker = str_c(abbreviate(ticker),"_",incl_or_excl)) |>
select(-group, -incl_or_excl) |>
mutate(label = ticker,
label = factor(label, levels = c(str_c(abbreviate(sector_levels_RD), "_excl"),
str_c(abbreviate(sector_levels_RD), "_incl"))),
name = ticker,
alpha = ifelse(str_detect(ticker, "incl"), 0.9, 0.6)) |>
select(date, ticker, price_index, name, label, fill, alpha)
# sector_chart_data_incl <-
#   sector_chart_data_incl_excl |>
#   filter(str_detect(ticker, "incl"))
sector_chart_data_excl <-
sector_chart_data_incl_excl |>
filter(str_detect(ticker, "excl"))
styles_tickers <- c("M1WOEW", "M1WOQU", "M1WO000V", "M1WO000G")#, "M1WOMVOL")
styles_tabel <-
tribble(~ticker, ~fill, ~label, ~alpha,
"M1WOEW", brewer.pal(7,"Oranges")[6], "EW", 0.7,
"M1WOQU", brewer.pal(7,"Oranges")[6], "Q", 0.6,
"M1WO000V", brewer.pal(7,"Oranges")[6], "V", 0.5,
"M1WO000G", brewer.pal(7,"Oranges")[6], "G", 0.4)
#"M1WOMVOL", "blue", "MV")
styles_chart_data_incl <-
all_prices_eur_long %>%
filter(ticker %in% styles_tabel$ticker,
date >= start_date_sector_indices) %>%
left_join(holdings |> select(ticker, name), by = "ticker") |>
left_join(styles_tabel, by = "ticker") |>
mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
price_index = cumprod(price_delta),
ticker = factor(ticker, levels = styles_tabel$ticker),
label = factor(label, levels = styles_tabel$label)) |> #,
# alpha = 0.8) |>
select(date, ticker, price_index, name, label, fill, alpha)
sector_en_styles_chart_data_incl <-
sector_chart_data_incl |>
bind_rows(styles_chart_data_incl)
landen_tabel <-
tribble(~ticker, ~fill, ~label,
"NDDUUS", "#BB2533", "US",
"M7EU", "#004494", "EU",
"M7NL", "#FF9B00", "NL",
"MSDEFRN", "blue", "FR",
"NDDUGR", "#FFCC00", "GE",
"NDDLSZ", "#FF0000", "CH",
"NDDLUK", "darkcyan", "UK",
"NDDUJN", "#8cb8c5", "JP",
"NDEEWNR", "darkgreen", "ACWI",
"MBEF", brewer.pal(7,"Oranges")[5], "EM",
"M1CN", "darkkhaki", "CN",
"M1IN", "#0a8901", "IN")
landen_chart_data <-
all_prices_eur_long %>%
filter(ticker %in% landen_tabel$ticker,
date >= start_date_sector_indices) %>%
left_join(holdings |> select(ticker, name), by = "ticker") |>
left_join(landen_tabel, by = "ticker") |>
mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
price_index = cumprod(price_delta),
ticker = factor(ticker, levels = landen_tabel$ticker),
label = factor(label, levels = landen_tabel$label),
alpha = 0.8) |>
select(date, ticker, price_index, name, label, fill, alpha)
currencies_tabel <-
tribble(~ticker, ~fill, ~label,
"EURUSD_ECB", "#BB2533", "USD",
"EURGBP_ECB", "darkcyan", "GBP",
"EURCHF_ECB", "#FF0000", "CHF",
"EURJPY_ECB", "#8cb8c5", "JPY",
"XBTUSD", "orange", "BTC")
currency_chart_data <-
ECB_Exchange_rates_long |>
group_by(currency) |>
rename(ticker = currency, price_eur = exchange_rate) |>
mutate(price_eur = 1/ price_eur,
name = ticker) |>
filter(date >= start_date_sector_indices,
ticker != "EUREUR_ECB") |>
left_join(currencies_tabel, by = "ticker") |>
mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
price_index = cumprod(price_delta),
ticker = factor(ticker, levels = currencies_tabel$ticker),
label = factor(label, levels = currencies_tabel$label),
alpha = 0.8) |>
select(date, ticker, price_index, name, label, fill, alpha)
other_tabel <-
tribble(~ticker, ~fill, ~label,
"SPLPEQNT_US", brewer.pal(7,"Oranges")[4], "PrEq",
"M1WOSC", "darkgoldenrod", "SmCp",
"IBXX000T", brewer.pal(7,"Purples")[6], "LDur",
"BCIW1A", brewer.pal(7,"Purples")[3], "ILBs",
"IBXXGH30", brewer.pal(5,"Greens")[5], "HY",
"JPEIGLBL", brewer.pal(5,"Greens")[3], "EMB",
"SPBDLL", brewer.pal(5,"Greens")[4], "LLs",
"XAUEUR", "gold", "Goud",
"SPGSCITR", "slategray", "Cdties")
other_chart_data <-
all_prices_eur_long %>%
filter(ticker %in% other_tabel$ticker,
date >= start_date_sector_indices) %>%
#kolom name erbij
left_join(holdings |> select(ticker, name), by = "ticker") |>
left_join(other_tabel, by = "ticker") |>
mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
price_index = cumprod(price_delta),
ticker = factor(ticker, levels = other_tabel$ticker),
label = factor(label, levels = other_tabel$label), #c("SmCp", "PrEq", "LLs",  "HY", "EMB", "ILBs", "LDur", "Goud", "Cdties")),
alpha = 0.8) |>
select(date, ticker, price_index, name, label, fill, alpha)
other_currency_chart_data <-
other_chart_data |>
bind_rows(currency_chart_data)
portfolios_benchmarks_chart_data <-
map_dfr(pf_levels, pf_vs_bm_index_kolom, start_date = start_date_sector_indices) |>
pivot_longer(cols = c(pf_index, BM_index)) |>
rename(ticker = portfolio, pf_BM = name) |>
left_join(portfolios_colors, by = c("ticker")) |>
mutate(name = str_c(ticker, pf_BM)) |>
mutate(name = case_when(str_detect(pf_BM, "BM") & str_detect(name, "50") ~ "BM5050",
str_detect(pf_BM, "BM") & str_detect(name, "70RM") ~ "BM3070",
str_detect(pf_BM, "BM") & str_detect(name, "30RM") ~ "BM7030",
str_detect(pf_BM, "BM") & str_detect(name, "RD100") ~ "BM_RD100",
str_detect(pf_BM, "BM") & str_detect(name, "VP100") ~ "BM_VP100",
TRUE ~ name)) |>
mutate(name = str_remove(name, "pf_index"),
alpha = 0.8,
label = name) |>
rename(fill = color,
price_index = value) |>
select(date, ticker, price_index, name, label, fill, alpha)
perf_bar_chart <-
function(chart_data = sector_chart_data_incl, titel_tekst = "MSCI World sectoren, ", start_date = start_date_attr, end_date = snapshot_date) {
if(end_date > start_date) {
chart_data <-
chart_data %>%
filter(date %in% c(start_date, end_date)) %>%
mutate(return = price_index/lag(price_index) - 1) %>%
filter(date == end_date)
chart_data %>%
ggplot(aes(x = label, y = return)) +
MSDEWIN_streep(aantal_bars =
chart_data |> select(ticker) |> unique() |> nrow(), start_date, end_date) +
geom_col(aes(fill = fill, alpha = alpha), col = "gray40") +
scale_fill_identity() +
scale_alpha_identity() +
geom_text(data = chart_data, aes(x = label,
y = return/2,
label = str_c(round(return*100, 1), "%")),
size = 3, col = "gray30", fontface = 'bold') +
scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
scale_x_discrete() +
ggtitle(str_c(titel_tekst, ", van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"))) +
labs(x = "", y = "") +
theme_bw() +
theme(legend.position = "none",
axis.text = element_text(size = 12),
plot.title = element_text(size = 12, hjust = 0.5))
} else
ggplot() +
theme_void() +
geom_text(aes(0, 0, label = str_c("geen maandgegevens na ", format(lastdate, "%d-%b"))))
}
all_mkts_barchart <- function(start_date = start_date_attr, end_date = snapshot_date) {
grid.arrange(
perf_bar_chart(chart_data = pfs_bms_chart_data, titel_tekst = "Modelportefeuilles en benchmarks", start_date, end_date) +
theme(axis.text = element_text(size = 10)) +
geom_vline(xintercept = c(1.5, 3.5, 8.5, 10.5), linetype = "dotdash", alpha = 0.7) +
annotate("text", x = (1.5+3.5)/2, y = MSDEWIN_perf(start_date, end_date) + .01, label = "RD30RM70") +
annotate("text", x = (3.5+8.5)/2, y = MSDEWIN_perf(start_date, end_date) + .01, label = "RD50RM50") +
annotate("text", x = (8.5+10.5)/2, y = MSDEWIN_perf(start_date, end_date) + .01, label = "RD70RM30") +
annotate("text", x = (10.5+13.5)/2, y = MSDEWIN_perf(start_date, end_date) + .01, label = "RD100"),
perf_bar_chart(chart_data = sector_en_styles_chart_data_incl, titel_tekst = "MSCI sectoren en stijlen, in EUR, incl. div.", start_date, end_date) + geom_vline(xintercept = c(11.5), linetype = "dotdash", alpha = 0.7),
perf_bar_chart(chart_data = landen_chart_data, titel_tekst = "MSCI landen/regio's, in EUR, incl. div.", start_date, end_date),
perf_bar_chart(chart_data = other_currency_chart_data, titel_tekst = "Other, in EUR, incl. div.", start_date, end_date) + geom_vline(xintercept = c(9.5), linetype = "dotdash", alpha = 0.7),
# perf_bar_chart(chart_data = other_currency_chart_data, titel_tekst = "Other, ", start_date, end_date),
# perf_bar_chart(chart_data = other_currency_chart_data, titel_tekst = "Other, ", start_date, end_date),
nrow = 2)
}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = last_ultimo_year, end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = lastdate, end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = last_quarter_end, end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = next_to_lastdate, end_date = lastdate)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = last_quarter_start, end_date = last_quarter_end)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = next_to_last_ultimo_year - years(1), end_date = last_ultimo_year - years(1))
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = next_to_last_ultimo_year - years(2), end_date = last_ultimo_year - years(2))
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = as.Date(start_date_vd), end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = as.Date(start_date_vp_vf), end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7
all_mkts_barchart(start_date = as.Date(start_date_sector_indices), end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 15
indices_plot <- function(data, start_date = start_date_sector_indices, end_date = snapshot_date, title = title, subtitle = subtitle, caption = caption) {
#welke tickers zijn available vanaf start_date
available_tickers <-
data |> filter(date == start_date) |> pull(ticker)
#data maken met indices startdatum = start_date
data <- data |>
group_by(ticker) |>
filter(date >= start_date, date <= end_date, ticker %in% available_tickers) |>
mutate(price_delta = ifelse(date == start_date, 0, price_index/lag(price_index) - 1),
price_index = 100 * cumprod(1 + price_delta)) |>
select(- price_delta)
#BM
ggplot(data = data,
aes(x = date, y = price_index, group = ticker, col = fill, alpha = alpha)) +
geom_line(linewidth = 1.2) +
scale_color_identity() +
geom_label_repel(data = data |> filter(date == snapshot_date),
aes(label = label, fill = fill, alpha = alpha),
col = "black",
nudge_x = 200, max.overlaps = 30) +
scale_fill_identity() +
scale_alpha_identity() +
scale_x_date(limits = c(as.Date(start_date), end_date + 700), breaks = datum_breaks(start_date, end_date), date_labels = "%y") +
scale_y_continuous(breaks = seq(0, 1000, 100), minor_breaks = seq(0, 1000, 50)) +
theme_bw() +
labs(x = "", y = "")+
ggtitle(label = str_c(title,
"van ",
day(start_date), "-", month(start_date, label = TRUE), "-", year(start_date),
" t/m ",
day(end_date), "-", month(end_date, label = TRUE), "-", year(end_date)),
subtitle) +
labs(caption) +
theme(legend.position = "none",
axis.text = element_text(size = 12),
plot.title = element_text(size = 12, hjust = 0.5))
}
all_indices_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
grid.arrange(
indices_plot(data = pfs_chart_data, start_date, end_date,
title = "Portefeuilles ",
subtitle = NULL, caption = NULL),
indices_plot(data = pfs_bms_chart_data, start_date, end_date,
title = "Portefeuilles en benchmarks ",
subtitle = NULL, caption = NULL),
indices_plot(data = sector_chart_data_incl, start_date, end_date, title = "MSCI sector indices in EUR, incl div. ", subtitle = NULL, caption = NULL),
indices_plot(data = styles_chart_data_incl |>
bind_rows(benega_msdewin_chart_data |> filter(ticker == "MSDEWIN")), start_date, end_date,
title = "MSCI stijlindices, incl div., in EUR, ", subtitle = NULL, caption = NULL),
indices_plot(data = landen_chart_data, start_date, end_date, title = "MSCI landen in EUR, incl div., ", subtitle = NULL, caption = NULL),
indices_plot(data = other_currency_chart_data, start_date, end_date, title = "Other en enkele valuta's, in EUR, ", subtitle = NULL, caption = NULL),
nrow = 3)
}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 10
all_indices_linechart(start_date = as.Date(start_date_sector_indices), end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 10
all_indices_linechart(start_date = as.Date(start_date_vp_vf), end_date = snapshot_date)
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 10
all_indices_linechart(start_date = as.Date(start_date_vd), end_date = snapshot_date)
#| layout-ncol: 1
#| fig-width: 7
#| fig-height: 4
#| fig-align: center
label_data <-
IWDA_sector_weights_hist %>%
filter(date == IWDA_sector_weights_hist$date[as.integer(length(IWDA_sector_weights_hist$date)/2)]) %>% #de datum in het midden
mutate(cumsum_wt = cumsum(weight),
x = weight/2,
pos = ifelse(sector == "Energy", x, lag(cumsum_wt) + x),
pos = 1 - pos)
ggplot(data = IWDA_sector_weights_hist, aes(x = date, y = weight))+
geom_area(aes(fill = sector), col = "darkgray", alpha = 0.4, position = "stack",stat = "identity") +
geom_label(data = label_data, aes(x = date, y = pos, label = sector, fill = sector), alpha = 0.6, color = "black", size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1, limits = c(0, 1))) +
scale_x_date(breaks = datum_breaks(start_date = start_date_sector_indices, end_date = lastdate), date_labels = "%b-%y") +
theme_minimal() +
labs(x = "", y = "") +
ggtitle("MSCI World sectorgewichten") +
theme(legend.position = "none")
landen_chart_data |>
bind_rows(other_currency_chart_data) |>
bind_rows(styles_chart_data_incl) |>
#filter(date == min(date)) |>
select(label, name, ticker) |> #, start_date = date) |>
unique() |>
rename(bloomberg_ticker = ticker) |>
ungroup() |>
gt() |>
tab_header("Gebruikte tickers") |>
gt_cols_align() |>
gt_font_padding_align()
#alleen op macbook RiRe.RData opslaan voor Beleggingsvoorstel (trackrecord)
if(str_detect(getwd(), "pieter")) {
save.image(file = "RiRe.Rdata")
save.image(file = "/Users/pieter/Library/CloudStorage/OneDrive-Personal/R Projects/Dashboard/RiRe.RData")
}
all_current_tickers
all_current_tickers |> View()
all_prices_local_long_daily_mtd
all_prices_local_long_daily_mtd |> group_by(ticker)
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(date == max(date))
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW"))
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN"))
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |> filter(date == max(date))
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |> filter(date == max(date)) |> ungroup() |> select(date) |> tally()
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |> filter(date == max(date)) |> ungroup() |> select(date)
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |> filter(date == max(date)) |> ungroup() |> select(date) |>arrange((date))
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |> filter(date == max(date)) |> ungroup() |> select(date) |>arrange((date)) |> head(1)
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |> filter(date == max(date)) |> ungroup() |> select(date) |>arrange((date)) |> head(1) |> pull()
all_prices_local_long_daily_mtd |> group_by(ticker) |> filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |> filter(date == max(date)) |> ungroup() |> select(date) |>arrange((date)) |> head(1) |> pull() |> str()
snapshot_date <- #laatste datum waarop koersen voor alle bloomberg_tickers (van de laatste file)
all_prices_local_long_daily_mtd %>%
group_by(ticker) %>%
#behalve bloomberg_tickers die niet goed of niet meer updaten
# filter(!str_detect(ticker, "ESTRON"),
#        !str_detect(ticker, "EONIA"),
#        !str_detect(ticker, "DSM_NA") ,
#        !str_detect(ticker, "RDSA_NA") ,
#        !str_detect(ticker, "T1"),
#        !str_detect(ticker, "VDE_UN"),
#        !str_detect(ticker, "MXWO0RE"),
#        !str_detect(ticker, "NL2_724"),
#        !str_detect(ticker, "SUSWLIN_NA"),
#        !str_detect(ticker, "SNAF2_NA"),
#        !str_detect(ticker, "NTSC"),
#        !str_detect(ticker, "JPEIGLBL"),
#        !str_detect(ticker, "EUR001M"),
#        #jaarbegin special
#        !str_detect(ticker, "_SE"),
#        !str_detect(ticker, "_SW")) %>%
#andere benadering: alle us tickers eerste datum
filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |>
filter(!is.na(PX_LAST)) |> #alleen bloomberg_tickers met een koers
filter(date == max(date)) %>%
ungroup() %>%
select(date) %>% #verschillende datums, verschilt per bloomberg_ticker
arrange(date) %>% #sorteren op datum
head(1) %>% #de eerste datum is de gemene deler, waarop voor alle bloomberg_tickers een prijs beschikbaar is
pull() %>%
as.Date()
NTSCLBE_NA_lastdate <-
all_prices_local_long_daily_mtd |>
filter(str_detect(ticker, "NTSCLBE_NA")) |>
filter(!is.na(PX_LAST)) |> #alleen bloomberg_tickers met een koers
filter(date == max(date)) %>%
pull(date)
snapshot_date_format <-
snapshot_date |>
format("%d-%b-%Y")
lastdate_format <-
lastdate |>
format("%d-%b-%Y")
snapshot_date
snapshot_date <- #laatste datum waarop koersen voor alle bloomberg_tickers (van de laatste file)
all_prices_local_long_daily_mtd %>%
group_by(ticker) %>%
#behalve bloomberg_tickers die niet goed of niet meer updaten
# filter(!str_detect(ticker, "ESTRON"),
#        !str_detect(ticker, "EONIA"),
#        !str_detect(ticker, "DSM_NA") ,
#        !str_detect(ticker, "RDSA_NA") ,
#        !str_detect(ticker, "T1"),
#        !str_detect(ticker, "VDE_UN"),
#        !str_detect(ticker, "MXWO0RE"),
#        !str_detect(ticker, "NL2_724"),
#        !str_detect(ticker, "SUSWLIN_NA"),
#        !str_detect(ticker, "SNAF2_NA"),
#        !str_detect(ticker, "NTSC"),
#        !str_detect(ticker, "JPEIGLBL"),
#        !str_detect(ticker, "EUR001M"),
#        #jaarbegin special
#        !str_detect(ticker, "_SE"),
#        !str_detect(ticker, "_SW")) %>%
#andere, positieve benadering zonder onderhoud: eerste datum alle us tickers
filter(str_detect(ticker, "_UW")|str_detect(ticker, "_UN")) |>
filter(!is.na(PX_LAST)) |> #alleen bloomberg_tickers met een koers
filter(date == max(date)) %>%
ungroup() %>%
select(date) %>% #verschillende datums, verschilt per bloomberg_ticker
arrange(date) %>% #sorteren op datum
head(1) %>% #de eerste datum is de gemene deler, waarop voor alle bloomberg_tickers een prijs beschikbaar is
pull()
snapshot_date
snapshot_date |> str()
snapshot_date <- #laatste datum waarop koersen voor alle bloomberg_tickers (van de laatste file)
all_prices_local_long_daily_mtd %>%
group_by(ticker) %>%
#behalve bloomberg_tickers die niet goed of niet meer updaten
# filter(!str_detect(ticker, "ESTRON"),
#        !str_detect(ticker, "EONIA"),
#        !str_detect(ticker, "DSM_NA") ,
#        !str_detect(ticker, "RDSA_NA") ,
#        !str_detect(ticker, "T1"),
#        !str_detect(ticker, "VDE_UN"),
#        !str_detect(ticker, "MXWO0RE"),
#        !str_detect(ticker, "NL2_724"),
#        !str_detect(ticker, "SUSWLIN_NA"),
#        !str_detect(ticker, "SNAF2_NA"),
#        !str_detect(ticker, "NTSC"),
#        !str_detect(ticker, "JPEIGLBL"),
#        !str_detect(ticker, "EUR001M"),
#        #jaarbegin special
#        !str_detect(ticker, "_SE"),
#        !str_detect(ticker, "_SW")) %>%
#andere, positieve benadering zonder onderhoud: eerste datum alle us tickers
filter(str_detect(ticker, "_U")) |>
filter(!is.na(PX_LAST)) |> #alleen bloomberg_tickers met een koers
filter(date == max(date)) %>%
ungroup() %>%
select(date) %>% #verschillende datums, verschilt per bloomberg_ticker
arrange(date) %>% #sorteren op datum
head(1) %>% #de eerste datum is de gemene deler, waarop voor alle bloomberg_tickers een prijs beschikbaar is
pull()
snapshot_date
all_prices_local_long_daily_mtd
